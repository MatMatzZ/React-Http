{"version":3,"sources":["logo.svg","components/PostList.js","components/PostForm.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PostList","props","state","posts","errorMsg","axios","get","then","response","console","log","setState","data","catch","error","this","length","map","post","key","id","title","Component","PostForm","changeHandler","e","target","name","value","submitHandler","preventDefault","alert","userId","body","onChange","type","onClick","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"2JAAAA,EAAOC,QAAU,IAA0B,kC,iKCwC5BC,E,kDApCX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,MAAQ,CACRC,MAAM,GACNC,SAAS,IALC,E,gEAQC,IAAD,OACfC,IAAMC,IAAI,8CACTC,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACR,MAAMK,EAASI,UAC/BC,OAAM,SAAAC,GACLL,QAAQC,IAAII,GACZ,EAAKH,SAAS,CAACP,SAAS,+B,+BAGtB,IAAD,EACqBW,KAAKb,MAAxBC,EADF,EACEA,MAAOC,EADT,EACSA,SACd,OACI,4CAGQD,EAAMa,OACNb,EAAMc,KAAI,SAAAC,GAAI,OAAI,yBAAKC,IAAKD,EAAKE,IAAKF,EAAKG,UAC3C,KAGAjB,EAAW,6BAAMA,GAAgB,U,GA9B9BkB,a,QCwDRC,E,kDAxDX,WAAYtB,GAAQ,IAAD,8BACf,cAAMA,IAQVuB,cAAgB,SAACC,GACb,EAAKd,SAAL,eAAgBc,EAAEC,OAAOC,KAAOF,EAAEC,OAAOE,SAV1B,EAYnBC,cAAgB,SAACJ,GACbA,EAAEK,iBACFrB,QAAQC,IAAI,EAAKR,OACjBG,IAAMa,KAAK,6CAA8C,EAAKhB,OAC7DK,MAAK,SAAAC,GACFC,QAAQC,IAAIF,GACZuB,MAAM,0BAAD,OAA2B,EAAK7B,MAAM8B,OAAtC,mBAAuD,EAAK9B,MAAMmB,WACxER,OAAM,SAAAC,GACLL,QAAQC,IAAII,OAjBhB,EAAKZ,MAAQ,CACT8B,OAAO,GACPX,MAAM,GACNY,KAAK,IANM,E,qDAuBT,IAAD,EACuBlB,KAAKb,MAA1B8B,EADF,EACEA,OAAOX,EADT,EACSA,MAAMY,EADf,EACeA,KACpB,OACI,6BACI,8BACI,6BACI,2BACAC,SAAUnB,KAAKS,cACfI,MAAOI,EACPG,KAAK,OACLR,KAAK,YAET,6BACI,2BACAO,SAAUnB,KAAKS,cACfI,MAAOP,EACPc,KAAK,OACLR,KAAK,WAET,6BACI,2BACAO,SAAUnB,KAAKS,cACfI,MAAOK,EACPE,KAAK,OACLR,KAAK,UAET,4BAAQS,QAASrB,KAAKc,eAAtB,gB,GAlDGP,aCeRe,MAXf,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,6BACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdxC,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMwC,c","file":"static/js/main.617aa706.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\n\r\nclass PostList extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             posts:[],\r\n             errorMsg:''\r\n        }\r\n    }\r\n    componentDidMount(){\r\n        axios.get('https://jsonplaceholder.typicode.com/posts')\r\n        .then(response=>{\r\n            console.log(response)\r\n            this.setState({posts:response.data})\r\n        }).catch(error => {\r\n            console.log(error)\r\n            this.setState({errorMsg:'Error retreiving data'})\r\n        })\r\n    }\r\n    render() {\r\n        const {posts, errorMsg} = this.state\r\n        return (\r\n            <div>\r\n                List of post\r\n                {\r\n                    posts.length?\r\n                    posts.map(post => <div key={post.id}>{post.title}</div>):\r\n                    null\r\n                }\r\n                {\r\n                    errorMsg ? <div>{errorMsg}</div>:null\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostList\r\n","import React, { Component } from 'react'\r\nimport axios from 'axios'\r\nclass PostForm extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n            userId:\"\",\r\n            title:\"\",\r\n            body:\"\",\r\n        }\r\n    }\r\n    changeHandler = (e)=>{\r\n        this.setState({[e.target.name]: e.target.value})\r\n    }\r\n    submitHandler = (e) => {\r\n        e.preventDefault()\r\n        console.log(this.state)\r\n        axios.post('https://jsonplaceholder.typicode.com/posts', this.state)\r\n        .then(response=>{\r\n            console.log(response)\r\n            alert(`Data inserted. UserId: ${this.state.userId} Title: ${this.state.title}`)\r\n        }).catch(error=>{\r\n            console.log(error)\r\n        })\r\n    }\r\n    render() {\r\n        const {userId,title,body} = this.state\r\n        return (\r\n            <div>\r\n                <form>\r\n                    <div>\r\n                        <input \r\n                        onChange={this.changeHandler} \r\n                        value={userId} \r\n                        type=\"text\" \r\n                        name=\"userId\"></input>\r\n                    </div>\r\n                    <div>\r\n                        <input \r\n                        onChange={this.changeHandler} \r\n                        value={title} \r\n                        type=\"text\" \r\n                        name=\"title\"></input>\r\n                    </div>\r\n                    <div>\r\n                        <input \r\n                        onChange={this.changeHandler} \r\n                        value={body} \r\n                        type=\"text\" \r\n                        name=\"body\"></input>\r\n                    </div>\r\n                    <button onClick={this.submitHandler}>Submit</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PostForm\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport PostList from './components/PostList';\nimport PostForm from './components/PostForm';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PostForm/>\n      <hr></hr>\n      <PostList/>\n      \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}